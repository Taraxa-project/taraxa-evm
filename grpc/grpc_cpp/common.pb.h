// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace taraxa {
namespace vm {
namespace statedb {
class BoolMessage;
class BoolMessageDefaultTypeInternal;
extern BoolMessageDefaultTypeInternal _BoolMessage_default_instance_;
class BytesMessage;
class BytesMessageDefaultTypeInternal;
extern BytesMessageDefaultTypeInternal _BytesMessage_default_instance_;
class VmId;
class VmIdDefaultTypeInternal;
extern VmIdDefaultTypeInternal _VmId_default_instance_;
}  // namespace statedb
}  // namespace vm
}  // namespace taraxa
namespace google {
namespace protobuf {
template<> ::taraxa::vm::statedb::BoolMessage* Arena::CreateMaybeMessage<::taraxa::vm::statedb::BoolMessage>(Arena*);
template<> ::taraxa::vm::statedb::BytesMessage* Arena::CreateMaybeMessage<::taraxa::vm::statedb::BytesMessage>(Arena*);
template<> ::taraxa::vm::statedb::VmId* Arena::CreateMaybeMessage<::taraxa::vm::statedb::VmId>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace taraxa {
namespace vm {
namespace statedb {

// ===================================================================

class VmId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taraxa.vm.statedb.VmId) */ {
 public:
  VmId();
  virtual ~VmId();

  VmId(const VmId& from);

  inline VmId& operator=(const VmId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VmId(VmId&& from) noexcept
    : VmId() {
    *this = ::std::move(from);
  }

  inline VmId& operator=(VmId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VmId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VmId* internal_default_instance() {
    return reinterpret_cast<const VmId*>(
               &_VmId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VmId* other);
  friend void swap(VmId& a, VmId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VmId* New() const final {
    return CreateMaybeMessage<VmId>(NULL);
  }

  VmId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VmId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VmId& from);
  void MergeFrom(const VmId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VmId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes contractAddress = 1;
  void clear_contractaddress();
  static const int kContractAddressFieldNumber = 1;
  const ::std::string& contractaddress() const;
  void set_contractaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_contractaddress(::std::string&& value);
  #endif
  void set_contractaddress(const char* value);
  void set_contractaddress(const void* value, size_t size);
  ::std::string* mutable_contractaddress();
  ::std::string* release_contractaddress();
  void set_allocated_contractaddress(::std::string* contractaddress);

  // string processId = 2;
  void clear_processid();
  static const int kProcessIdFieldNumber = 2;
  const ::std::string& processid() const;
  void set_processid(const ::std::string& value);
  #if LANG_CXX11
  void set_processid(::std::string&& value);
  #endif
  void set_processid(const char* value);
  void set_processid(const char* value, size_t size);
  ::std::string* mutable_processid();
  ::std::string* release_processid();
  void set_allocated_processid(::std::string* processid);

  // @@protoc_insertion_point(class_scope:taraxa.vm.statedb.VmId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr contractaddress_;
  ::google::protobuf::internal::ArenaStringPtr processid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BytesMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taraxa.vm.statedb.BytesMessage) */ {
 public:
  BytesMessage();
  virtual ~BytesMessage();

  BytesMessage(const BytesMessage& from);

  inline BytesMessage& operator=(const BytesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BytesMessage(BytesMessage&& from) noexcept
    : BytesMessage() {
    *this = ::std::move(from);
  }

  inline BytesMessage& operator=(BytesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BytesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesMessage* internal_default_instance() {
    return reinterpret_cast<const BytesMessage*>(
               &_BytesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BytesMessage* other);
  friend void swap(BytesMessage& a, BytesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BytesMessage* New() const final {
    return CreateMaybeMessage<BytesMessage>(NULL);
  }

  BytesMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BytesMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BytesMessage& from);
  void MergeFrom(const BytesMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:taraxa.vm.statedb.BytesMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoolMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taraxa.vm.statedb.BoolMessage) */ {
 public:
  BoolMessage();
  virtual ~BoolMessage();

  BoolMessage(const BoolMessage& from);

  inline BoolMessage& operator=(const BoolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoolMessage(BoolMessage&& from) noexcept
    : BoolMessage() {
    *this = ::std::move(from);
  }

  inline BoolMessage& operator=(BoolMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolMessage* internal_default_instance() {
    return reinterpret_cast<const BoolMessage*>(
               &_BoolMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BoolMessage* other);
  friend void swap(BoolMessage& a, BoolMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolMessage* New() const final {
    return CreateMaybeMessage<BoolMessage>(NULL);
  }

  BoolMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BoolMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BoolMessage& from);
  void MergeFrom(const BoolMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:taraxa.vm.statedb.BoolMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VmId

// bytes contractAddress = 1;
inline void VmId::clear_contractaddress() {
  contractaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VmId::contractaddress() const {
  // @@protoc_insertion_point(field_get:taraxa.vm.statedb.VmId.contractAddress)
  return contractaddress_.GetNoArena();
}
inline void VmId::set_contractaddress(const ::std::string& value) {
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:taraxa.vm.statedb.VmId.contractAddress)
}
#if LANG_CXX11
inline void VmId::set_contractaddress(::std::string&& value) {
  
  contractaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:taraxa.vm.statedb.VmId.contractAddress)
}
#endif
inline void VmId::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:taraxa.vm.statedb.VmId.contractAddress)
}
inline void VmId::set_contractaddress(const void* value, size_t size) {
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:taraxa.vm.statedb.VmId.contractAddress)
}
inline ::std::string* VmId::mutable_contractaddress() {
  
  // @@protoc_insertion_point(field_mutable:taraxa.vm.statedb.VmId.contractAddress)
  return contractaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VmId::release_contractaddress() {
  // @@protoc_insertion_point(field_release:taraxa.vm.statedb.VmId.contractAddress)
  
  return contractaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VmId::set_allocated_contractaddress(::std::string* contractaddress) {
  if (contractaddress != NULL) {
    
  } else {
    
  }
  contractaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractaddress);
  // @@protoc_insertion_point(field_set_allocated:taraxa.vm.statedb.VmId.contractAddress)
}

// string processId = 2;
inline void VmId::clear_processid() {
  processid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VmId::processid() const {
  // @@protoc_insertion_point(field_get:taraxa.vm.statedb.VmId.processId)
  return processid_.GetNoArena();
}
inline void VmId::set_processid(const ::std::string& value) {
  
  processid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:taraxa.vm.statedb.VmId.processId)
}
#if LANG_CXX11
inline void VmId::set_processid(::std::string&& value) {
  
  processid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:taraxa.vm.statedb.VmId.processId)
}
#endif
inline void VmId::set_processid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:taraxa.vm.statedb.VmId.processId)
}
inline void VmId::set_processid(const char* value, size_t size) {
  
  processid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:taraxa.vm.statedb.VmId.processId)
}
inline ::std::string* VmId::mutable_processid() {
  
  // @@protoc_insertion_point(field_mutable:taraxa.vm.statedb.VmId.processId)
  return processid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VmId::release_processid() {
  // @@protoc_insertion_point(field_release:taraxa.vm.statedb.VmId.processId)
  
  return processid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VmId::set_allocated_processid(::std::string* processid) {
  if (processid != NULL) {
    
  } else {
    
  }
  processid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processid);
  // @@protoc_insertion_point(field_set_allocated:taraxa.vm.statedb.VmId.processId)
}

// -------------------------------------------------------------------

// BytesMessage

// bytes value = 1;
inline void BytesMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BytesMessage::value() const {
  // @@protoc_insertion_point(field_get:taraxa.vm.statedb.BytesMessage.value)
  return value_.GetNoArena();
}
inline void BytesMessage::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:taraxa.vm.statedb.BytesMessage.value)
}
#if LANG_CXX11
inline void BytesMessage::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:taraxa.vm.statedb.BytesMessage.value)
}
#endif
inline void BytesMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:taraxa.vm.statedb.BytesMessage.value)
}
inline void BytesMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:taraxa.vm.statedb.BytesMessage.value)
}
inline ::std::string* BytesMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:taraxa.vm.statedb.BytesMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BytesMessage::release_value() {
  // @@protoc_insertion_point(field_release:taraxa.vm.statedb.BytesMessage.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BytesMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:taraxa.vm.statedb.BytesMessage.value)
}

// -------------------------------------------------------------------

// BoolMessage

// bool value = 1;
inline void BoolMessage::clear_value() {
  value_ = false;
}
inline bool BoolMessage::value() const {
  // @@protoc_insertion_point(field_get:taraxa.vm.statedb.BoolMessage.value)
  return value_;
}
inline void BoolMessage::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:taraxa.vm.statedb.BoolMessage.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statedb
}  // namespace vm
}  // namespace taraxa

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
