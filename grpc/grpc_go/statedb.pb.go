// Code generated by protoc-gen-go. DO NOT EDIT.
// source: statedb.proto

package grpc_go

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateDBClient is the client API for StateDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateDBClient interface {
	Put(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	Has(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BoolMessage, error)
	Close(ctx context.Context, in *VmId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type stateDBClient struct {
	cc *grpc.ClientConn
}

func NewStateDBClient(cc *grpc.ClientConn) StateDBClient {
	return &stateDBClient{cc}
}

func (c *stateDBClient) Put(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/taraxa.vm.statedb.StateDB/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Delete(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/taraxa.vm.statedb.StateDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Get(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/taraxa.vm.statedb.StateDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Has(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BoolMessage, error) {
	out := new(BoolMessage)
	err := c.cc.Invoke(ctx, "/taraxa.vm.statedb.StateDB/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateDBClient) Close(ctx context.Context, in *VmId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/taraxa.vm.statedb.StateDB/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateDBServer is the server API for StateDB service.
type StateDBServer interface {
	Put(context.Context, *BytesMessage) (*empty.Empty, error)
	Delete(context.Context, *BytesMessage) (*empty.Empty, error)
	Get(context.Context, *BytesMessage) (*BytesMessage, error)
	Has(context.Context, *BytesMessage) (*BoolMessage, error)
	Close(context.Context, *VmId) (*empty.Empty, error)
}

func RegisterStateDBServer(s *grpc.Server, srv StateDBServer) {
	s.RegisterService(&_StateDB_serviceDesc, srv)
}

func _StateDB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taraxa.vm.statedb.StateDB/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Put(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taraxa.vm.statedb.StateDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Delete(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taraxa.vm.statedb.StateDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Get(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taraxa.vm.statedb.StateDB/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Has(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateDB_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateDBServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taraxa.vm.statedb.StateDB/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateDBServer).Close(ctx, req.(*VmId))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taraxa.vm.statedb.StateDB",
	HandlerType: (*StateDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _StateDB_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StateDB_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StateDB_Get_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _StateDB_Has_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _StateDB_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statedb.proto",
}

func init() { proto.RegisterFile("statedb.proto", fileDescriptor_statedb_d23b3a739d5b4cd5) }

var fileDescriptor_statedb_d23b3a739d5b4cd5 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x49, 0x2c,
	0x49, 0x4d, 0x49, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x49, 0x2c, 0x4a, 0xac,
	0x48, 0xd4, 0x2b, 0xcb, 0xd5, 0x83, 0x4a, 0x48, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea,
	0x83, 0x15, 0x24, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0xd4, 0x4b, 0xf1, 0x24,
	0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0x41, 0x78, 0x46, 0xd7, 0x99, 0xb8, 0xd8, 0x83, 0x41, 0xda, 0x5c,
	0x9c, 0x84, 0xec, 0xb8, 0x98, 0x03, 0x4a, 0x4b, 0x84, 0xe4, 0xf5, 0x30, 0x4c, 0xd4, 0x73, 0xaa,
	0x2c, 0x49, 0x2d, 0xf6, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x12, 0xd3, 0x83, 0x98, 0xaf,
	0x07, 0x33, 0x5f, 0xcf, 0x15, 0x64, 0xbe, 0x90, 0x23, 0x17, 0x9b, 0x4b, 0x6a, 0x4e, 0x6a, 0x49,
	0x2a, 0xf9, 0x46, 0xb8, 0x73, 0x31, 0xbb, 0xa7, 0x12, 0xe1, 0x04, 0x42, 0x0a, 0x84, 0xdc, 0xb8,
	0x98, 0x3d, 0x12, 0x8b, 0x09, 0x1b, 0x24, 0x87, 0x4d, 0x41, 0x7e, 0x7e, 0x0e, 0xcc, 0x1c, 0x0b,
	0x2e, 0x56, 0xe7, 0x9c, 0xfc, 0xe2, 0x54, 0x21, 0x71, 0x2c, 0x0a, 0xc3, 0x72, 0x3d, 0x53, 0x70,
	0x79, 0xc5, 0x89, 0x33, 0x8a, 0x3d, 0xbd, 0xa8, 0x20, 0x39, 0x3e, 0x3d, 0x3f, 0x89, 0x0d, 0x2c,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x16, 0x5e, 0x3c, 0xff, 0xba, 0x01, 0x00, 0x00,
}
