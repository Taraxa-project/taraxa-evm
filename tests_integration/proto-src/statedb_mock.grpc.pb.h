// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: statedb.proto

#include "statedb.pb.h"
#include "statedb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace taraxa {
namespace vm {
namespace statedb {

class MockStateDBStub : public StateDB::StubInterface {
 public:
  MOCK_METHOD3(Put, ::grpc::Status(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncPutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Delete, ::grpc::Status(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncDeleteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Get, ::grpc::Status(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::taraxa::vm::statedb::BytesMessage* response));
  MOCK_METHOD3(AsyncGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::taraxa::vm::statedb::BytesMessage>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::taraxa::vm::statedb::BytesMessage>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Has, ::grpc::Status(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::taraxa::vm::statedb::BoolMessage* response));
  MOCK_METHOD3(AsyncHasRaw, ::grpc::ClientAsyncResponseReaderInterface< ::taraxa::vm::statedb::BoolMessage>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHasRaw, ::grpc::ClientAsyncResponseReaderInterface< ::taraxa::vm::statedb::BoolMessage>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::BytesMessage& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Close, ::grpc::Status(::grpc::ClientContext* context, const ::taraxa::vm::statedb::VmId& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncCloseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::VmId& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCloseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::taraxa::vm::statedb::VmId& request, ::grpc::CompletionQueue* cq));
};

} // namespace taraxa
} // namespace vm
} // namespace statedb

